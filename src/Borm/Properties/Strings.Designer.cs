// <auto-generated />

using System;
using System.Diagnostics;
using System.Resources;
using System.Runtime.CompilerServices;

#nullable enable

namespace Borm.Properties; 
public static class Strings 
{
    private static readonly ResourceManager ResourceManager = new("Borm.Properties.Strings", typeof(Strings).Assembly);

    /// <summary>
    /// Data context is not initialized.
    /// </summary>
    public static string DataContextNotInitialized()
    {
        return GetString(formatArgs: null);
    }

    /// <summary>
    /// Entity '{entityName}' must have at least 1 column.
    /// </summary>
    public static string EmptyColumnCollection(string entityName)
    {
        return GetString([entityName]);
    }

    /// <summary>
    /// The entity type '{entityTypeName}' cannot be abstract.
    /// </summary>
    public static string EntityTypeCannotBeAbstract(string entityTypeName)
    {
        return GetString([entityTypeName]);
    }

    /// <summary>
    /// Validation failed for entity type '{entityType}'.
    /// </summary>
    public static string EntityValidationFailed(Type entityType)
    {
        return GetString([entityType]);
    }

    /// <summary>
    /// Column index cannot be lesser than zero.
    /// </summary>
    public static string InvalidColumnIndex()
    {
        return GetString(formatArgs: null);
    }

    /// <summary>
    /// The type '{entityTypeName}' does not have a public constructor that would initialise all columns.
    /// </summary>
    public static string InvalidEntityTypeConstructor(string entityTypeName)
    {
        return GetString([entityTypeName]);
    }

    /// <summary>
    /// Entity '{entityName}' has no primary key.
    /// </summary>
    public static string MissingPrimaryKey(string entityName)
    {
        return GetString([entityName]);
    }

    /// <summary>
    /// The data context does not contain a table for the entity of type '{entityTypeName}'.
    /// </summary>
    public static string MissingTableForEntity(string entityTypeName)
    {
        return GetString([entityTypeName]);
    }

    /// <summary>
    /// Entity types must be decorated with the 'EntityAttribute'.
    /// </summary>
    public static string NotDecoratedEntityType()
    {
        return GetString(formatArgs: null);
    }

    /// <summary>
    /// The column '{columnName}' in the table '{tableName}' cannot be set to null.
    /// </summary>
    public static string NullableConstraintViolation(string columnName, string tableName)
    {
        return GetString([columnName, tableName]);
    }

    /// <summary>
    /// The table '{tableName}' already contains a row with the primary key '{primaryKey}'.
    /// </summary>
    public static string PrimaryKeyConstraintViolation(string tableName, object primaryKey)
    {
        return GetString([tableName, primaryKey]);
    }

    /// <summary>
    /// Table '{tableName}' does not contain row with the primary key '{primaryKey}'.
    /// </summary>
    public static string RowNotFound(string tableName, object primaryKey)
    {
        return GetString([tableName, primaryKey]);
    }

    /// <summary>
    /// Type '{typeName}' is not supported.
    /// </summary>
    public static string TypeNotSupported(string typeName)
    {
        return GetString([typeName]);
    }

    /// <summary>
    /// The table '{tableName}' already contains a row where the value of the column '{columnName}' is '{columnValue}'.
    /// </summary>
    public static string UniqueConstraintViolation(string tableName, string columnName, object? columnValue)
    {
        return GetString([tableName, columnName, columnValue]);
    }
    private static string GetString(object?[]? formatArgs, [CallerMemberName] string? resourceName = null)
    {
        string? msgFormat = ResourceManager.GetString(resourceName!);
        Debug.Assert(!string.IsNullOrEmpty(msgFormat), $"The resource with the name '{resourceName}' could not be found.");
        return formatArgs == null ? msgFormat : string.Format(msgFormat, formatArgs);
    }
}
